<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/" xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" xmlns:rawvoice="http://www.rawvoice.com/rawvoiceRssModule/" xmlns:googleplay="http://www.google.com/schemas/play-podcasts/1.0" version="2.0">
  <channel>
    <title>
      Coding Blocks - Patterns, Architecture, Best Practices, Tips and Tricks for Software, Database, and Web Developers / Engineers
    </title>
    <atom:link href="https://www.codingblocks.net/feed/podcast" rel="self" type="application/rss+xml" />
    <link>https://www.codingblocks.net</link>
    <description>
      A podcast for software developers and computer programmers to educate on the go.
    </description>
    <lastBuildDate>Mon, 25 Jun 2018 14:31:57 +0000</lastBuildDate>
    <language>en-US</language>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    <generator>https://wordpress.org/?v=4.9.6</generator>
    <image>
      <url>
        https://www.codingblocks.net/wp-content/uploads/2016/01/cropped-favicon-32x32.png
      </url>
      <title>
        Coding Blocks - Patterns, Architecture, Best Practices, Tips and Tricks for Software, Database, and Web Developers / Engineers
      </title>
      <link>https://www.codingblocks.net</link>
      <width>32</width>
      <height>32</height>
    </image>
    <!--
 podcast_generator="Blubrry PowerPress/7.2" mode="advanced" feedslug="podcast" Blubrry PowerPress Podcasting plugin for WordPress (https://www.blubrry.com/powerpress/)
-->
    <itunes:summary>
      Pragmatic talk about software design best practices: design patterns, software architecture, coding for performance, object oriented programming, database design and implementation, tips, tricks and a whole lot more.<br /> <br /> You'll be exposed to broad areas of information as well as deep dives into the guts of a programming language. Most topics discussed are relevant in any number of Object Oriented programming languages such as C#, Java, Ruby, PHP, etc.. All three of us are full stack web and database / software engineers so we discuss Javascript, HTML, SQL and a full spectrum of technologies and are open to any suggestions anyone might have for a topic. So please join us, subscribe, and invite your computer programming friends to come along for the ride.
    </itunes:summary>
    <itunes:author>
      Allen Underwood, Michael Outlaw, Joe Zack : Software Developers
    </itunes:author>
    <itunes:explicit>clean</itunes:explicit>
    <itunes:image href="https://www.codingblocks.net/wp-content/uploads/powerpress/codingblocks-itunes.jpg" />
    <itunes:type>episodic</itunes:type>
    <itunes:owner>
      <itunes:name>
        Allen Underwood, Michael Outlaw, Joe Zack : Software Developers
      </itunes:name>
      <itunes:email>allenerb@gmail.com</itunes:email>
    </itunes:owner>
    <managingEditor>
      allenerb@gmail.com (Allen Underwood, Michael Outlaw, Joe Zack : Software Developers)
    </managingEditor>
    <copyright>CodingBlocks.NET 2018 709306</copyright>
    <itunes:subtitle>
      Podcast about computer programming and software development so you can learn on the go.
    </itunes:subtitle>
    <image>
      <title>
        Coding Blocks - Patterns, Architecture, Best Practices, Tips and Tricks for Software, Database, and Web Developers / Engineers
      </title>
      <url>
        https://www.codingblocks.net/wp-content/uploads/powerpress/codingblocks-itunes.jpg
      </url>
      <link>https://www.codingblocks.net</link>
    </image>
    <itunes:category text="Technology">
      <itunes:category text="Software How-To" />
    </itunes:category>
    <itunes:category text="Education">
      <itunes:category text="Education Technology" />
    </itunes:category>
    <itunes:category text="Education">
      <itunes:category text="Training" />
    </itunes:category>
    <googleplay:category text="Technology" />
    <rawvoice:rating>TV-G</rawvoice:rating>
    <rawvoice:location>Atlanta, GA</rawvoice:location>
    <rawvoice:frequency>Bi-Weekly</rawvoice:frequency>
    <rawvoice:subscribe feed="https://www.codingblocks.net/feed/podcast" itunes="https://itunes.apple.com/us/podcast/coding-blocks-software-web/id769189585?mt=2" googleplay="https://play.google.com/music/listen#/ps/Id45cm3l3vfktncuerxo44sb5qu" blubrry="https://www.blubrry.com/codingblocks/" stitcher="http://www.stitcher.com/podcast/coding-blocks-software-and-web-programming-security-best?refid=stpr" tunein="https://beta.tunein.com/radio/Coding-Blocks-p567801/" />
    <item>
      <title>84. Algorithms You Should Know</title>
      <link>
        https://www.codingblocks.net/podcast/algorithms-you-should-know/
      </link>
      <pubDate>Mon, 25 Jun 2018 03:37:50 +0000</pubDate>
      <guid isPermaLink="false">https://www.codingblocks.net/?p=3974</guid>
      <comments>
        https://www.codingblocks.net/podcast/algorithms-you-should-know/#respond
      </comments>
      <wfw:commentRss>
        https://www.codingblocks.net/podcast/algorithms-you-should-know/feed/
      </wfw:commentRss>
      <slash:comments>0</slash:comments>
      <category>
        <![CDATA[ Podcasts ]]>
      </category>
      <category>
        <![CDATA[ algorithm ]]>
      </category>
      <category>
        <![CDATA[ bfs ]]>
      </category>
      <category>
        <![CDATA[ binary search ]]>
      </category>
      <category>
        <![CDATA[ bubble sort ]]>
      </category>
      <category>
        <![CDATA[ dfs ]]>
      </category>
      <category>
        <![CDATA[ graph traversal ]]>
      </category>
      <category>
        <![CDATA[ graphs ]]>
      </category>
      <category>
        <![CDATA[ heapsort ]]>
      </category>
      <category>
        <![CDATA[ merge sort ]]>
      </category>
      <category>
        <![CDATA[ quicksort ]]>
      </category>
      <category>
        <![CDATA[ searching algorithms ]]>
      </category>
      <category>
        <![CDATA[ selection sort ]]>
      </category>
      <category>
        <![CDATA[ sorting algorithms ]]>
      </category>
      <category>
        <![CDATA[ trees ]]>
      </category>
      <description>
        <img width="150" height="99" src="https://www.codingblocks.net/wp-content/uploads/2018/06/Episode084.jpg" class="webfeedsFeaturedVisual wp-post-image" alt="" style="display: block; margin-bottom: 5px; clear:both;max-width: 100%;" /><img width="150" height="99" src="https://www.codingblocks.net/wp-content/uploads/2018/06/Episode084.jpg" class="attachment-thumbnail size-thumbnail wp-post-image" alt="" style="float:left; margin:0 15px 15px 0;" />It's time we discuss algorithms we all need to know as we continue diving into Rob Conery's The Imposter's Handbook while Michael will read anything, Allen questions Greenland's name, and Joe talks wormholes.
      </description>
      <content:encoded>
        <![CDATA[
<img width="150" height="99" src="https://www.codingblocks.net/wp-content/uploads/2018/06/Episode084.jpg" class="webfeedsFeaturedVisual wp-post-image" alt="" style="display: block; margin-bottom: 5px; clear:both;max-width: 100%;" /><img width="150" height="99" src="https://www.codingblocks.net/wp-co
]]>
        <![CDATA[
ntent/uploads/2018/06/Episode084.jpg" class="attachment-thumbnail size-thumbnail wp-post-image" alt="" style="float:left; margin:0 15px 15px 0;" /><p>It&#8217;s time we discuss algorithms we all need to know as we continue diving into Rob Conery&#8217;s <a href="https://bigmachine.io/products/the-imposters-handbook/"><em>The Imposter&#8217;s Handbook</em></a> while Michael will read anything, Allen questions Greenland&#8217;s name, and Joe talks wormholes.</p> <p><span id="more-3974"></span></p> <h2>Sponsors</h2> <ul> <li><a href="/datadog">Datadog.com/codingblocks</a> &#8211; Sign up today for a free 14 day trial <strong><em>and</em></strong> get a free Datadog t-shirt after creating your first dashboard.</li> </ul> <h2>Survey Says</h2> <div class='bootstrap-yop'> <div class="basic-yop-poll-container" style="background-color:#333333;border:0px;border-style:solid;border-color:#ffffff;border-radius:3px;padding:0px;"data-id="62"data-temp="basic"data-skin="minimal"data-cscheme="black"data-cap="0"data-access="guest,wordpress"data-tid=""data-uid="4685789b6e45a8b17cab1a73d66aca83"data-resdet="percentages"data-show-results-to="guest,registered"data-show-results-moment="after-vote"data-show-results-only="false"data-show-results-as="bar"data-sort-results-by="as-defined"data-sort-results-rule="asc"data-gdpr="no"data-gdpr-sol="consent"><div class="basic-canvas"></div><div class="basic-inner"><div class="basic-message hide" style="background-color:#ffffff;border:0px;border-style:solid;border-color:#ffffff;border-radius:0px;padding:0px;color:#ff0000;font-size:small;""><p></p></div><div class="basic-overlay hide"><div class="basic-vote-options"><div class="basic-anonymous"><button type="button" class="btn btn-default"><i class="fa fa-user-secret" aria-hidden="true"></i>Anonymous Vote</button></div><div class="basic-wordpress"><button type="button" class="btn btn-default"><i class="fa fa-wordpress" aria-hidden="true"></i>Sign in with Wordpress</button></div></div><div class="basic-preloader hide"><div class="basic-windows8"><div class="basic-wBall basic-wBall_1"><div class="basic-wInnerBall"></div></div><div class="basic-wBall basic-Ball_2"><div class="basic-wInnerBall"></div></div><div class="basic-wBall basic-wBall_3"><div class="basic-wInnerBall"></div></div><div class="basic-wBall basic-wBall_4"><div class="basic-wInnerBall"></div></div><div class="basic-wBall basic-wBall_5"><div class="basic-wInnerBall"></div></div></div></div></div><form class="basic-form"><input type="hidden" name="_token" value="444ced3399"><div class="basic-elements"><div class="basic-element basic-question" style="background-color:#f5f5f5;border:0px;border-style: solid;border-color:#ffffff;border-radius:3px;padding:10px;color:#000000;font-size:small;"data-id="62"data-uid="56bcc09ad2508434723218c5cfb7ce96"data-type="question"data-question-type="text"data-min="1"data-max="3"data-display="vertical"data-colnum="2"><div class="basic-question-title">What is your most productive season?</div><ul class="basic-answers"><li class="basic-answer" style="background-color:#f5f5f5;border:0px;border-style: solid;border-color:#ffffff;border-radius:0px;padding:0px;color:#000000;font-size:small;" data-id="960" data-type="text" data-vn="1" data-color="#fbd55e"><div class="basic-canvas"><span class="basic-howmuch"></span></div><div class="basic-inner"><label class="basic-label"><input type="radio" name="answer[62]" value="960"><span class="basic-answer-content"><span class="basic-text">Spring. Best way to avoid the pollen!</span></span></label></div></li><li class="basic-answer" style="background-color:#f5f5f5;border:0px;border-style: solid;border-color:#ffffff;border-radius:0px;padding:0px;color:#000000;font-size:small;" data-id="961" data-type="text" data-vn="1" data-color="#fbd55e"><div class="basic-canvas"><span class="basic-howmuch"></span></div><div class="basic-inner"><label class="basic-label"><input type="radio" name="answer[62]" value="961"><span class="basic-answer-content"><span class="basic-text">Summer. Let me stay behind my keyboard in the nice air conditioned room.</span></span></label></div></li><li class="basic-answer" style="background-color:#f5f5f5;border:0px;border-style: solid;border-color:#ffffff;border-radius:0px;padding:0px;color:#000000;font-size:small;" data-id="962" data-type="text" data-vn="3" data-color="#fbd55e"><div class="basic-canvas"><span class="basic-howmuch"></span></div><div class="basic-inner"><label class="basic-label"><input type="radio" name="answer[62]" value="962"><span class="basic-answer-content"><span class="basic-text">Fall. The sky, er, leaves are falling. Safer to stay inside.</span></span></label></div></li><li class="basic-answer" style="background-color:#f5f5f5;border:0px;border-style: solid;border-color:#ffffff;border-radius:0px;padding:0px;color:#000000;font-size:small;" data-id="964" data-type="text" data-vn="3" data-color="#fbd55e"><div class="basic-canvas"><span class="basic-howmuch"></span></div><div class="basic-inner"><label class="basic-label"><input type="radio" name="answer[62]" value="964"><span class="basic-answer-content"><span class="basic-text">Winter. Olaf scares me, I&#039;m not going out there.</span></span></label></div></li><li class="basic-answer" style="background-color:#f5f5f5;border:0px;border-style: solid;border-color:#ffffff;border-radius:0px;padding:0px;color:#000000;font-size:small;" data-id="981" data-type="text" data-vn="3" data-color="#000000"><div class="basic-canvas"><span class="basic-howmuch"></span></div><div class="basic-inner"><label class="basic-label"><input type="radio" name="answer[62]" value="981"><span class="basic-answer-content"><span class="basic-text">Seasons? We don&#039;t have seasons here!!</span></span></label></div></li></ul></div></div><div class="basic-vote "><a href="#" class="button basic-vote-button" style="background:#ffffff;border:0px;border-style: solid;border-color:#000000;border-radius:3px;padding:0px;color:#333333;font-size:small;">vote</a></div></form></div></div> </div> <p>&nbsp;</p> <h2>News</h2> <ul> <li>As always, we take a moment to give a huge <em>thank you</em> to everyone that left us a review: <ul> <li>iTunes: AKeith047, ThinkingWithMyHareBrain, T.Todorov, MeroIT, YourWorstEn3my, fiery_ginger, Emchar86, Joshua Reynvaan, Michael-not-an-outlaw, &#8220;Michael Joe Allen, SerialKilla&#8221;</li> <li>Stitcher: LiamM, daniel65, CBFan7629045419, Radulan</li> </ul> </li> <li>Default interface methods might be coming to C# 8. (<a href="https://www.infoq.com/articles/default-interface-methods-cs8">Info Q</a>)</li> <li>We released our second Community Talk, this time discussing <a href="https://www.embarcadero.com/products/rad-studio">RAD Studio</a>. (<a href="https://youtu.be/doc4AkJG5Kg">YouTube</a>)</li> <li>Joe releases more videos adding to the <a href="https://qit.cloud/">QIT</a> Diary. (<a href="https://www.youtube.com/playlist?list=PLWWyzc5ehM93nerBjsOQTfG7H4fT9D82T">YouTube</a>)</li> <li>Allen explains why a cube or data warehouse doesn&#8217;t solve the search problems we discussed in <a href="/episode83">episode 83</a>.</li> </ul> <h2>Algorithms Made Easy</h2> <h3>Bubble Sort</h3> <h4>What is it?</h4> <ul> <li>Iterate through the list to be sorted, comparing adjacent items, swapping them if they are in the wrong order. Repeat this process until no swaps are required. <ul> <li>Consider the values: 1, 3 5, 2, 4</li> <li>First compare the 1, 3. They are in the correct order. Then compare the 3 and 5. They are also in the correct order.</li> <li>Now compare the 5 and 2. They need to be swapped. The values are now 1, 3, 2, 5, 4.</li> <li>Now compare the 5 and 4. They also need to be swapped. The values are now 1, 3, 2, 4, 5</li> <li>We need to iterate through the list again. Compare 1 and 3. They&#8217;re good. Now 2 and 3. Swap &#8217;em! The values are now 1, 2, 3, 4, 5.</li> <li>Now we iterate over the list again. Nothing needs to be swapped. But we had to do this to verify that.</li> <li>So we&#8217;ve sorted the list. It took 3 iterations over the list to rearrange 1, 3, 5, 2, 4 into 1, 2, 3, 4, 5.</li> </ul> </li> <li>Best time complexity is O(n) while the average and worst time complexities are O(n^2). The worst space complexity is O(1).</li> <li>Visualizations available at <a href="https://en.wikipedia.org/wiki/Bubble_sort">Wikipedia</a> and <a href="https://www.toptal.com/developers/sorting-algorithms/bubble-sort">Toptal</a>.</li> </ul> <h4>Strengths</h4> <ul> <li>Might be the easiest of sorting algorithms to implement. Certainly easy to understand. <ul> <li>A case can be made that this makes it a nice introduction to algorithms, although, some argue that better algorithms should be used as an introduction instead, like insertion sort or quicksort.</li> </ul> </li> </ul> <h4>Weaknesses</h4> <ul> <li>Might also be one of the worst sorting algorithms in regards to time complexity.</li> <li>Horribly inefficient in regards to time. There is almost always a better choice.</li> </ul> <h4>When to use it?</h4> <ul> <li>According to <a href="https://en.wikipedia.org/wiki/Bubble_sort#In_practice">Wikipedia</a>, there is a popular use for it in a very specific use for graphics, but aside from that avoid it unless you specifically know why it&#8217;s the best choice. <ul> <li>Basically when you can *assume* that the list is already &#8220;almost-sorted&#8221;</li> <li>From <a href="https://en.wikipedia.org/wiki/Bubble_sort#In_practice">Wikipedia</a>: <em>_&#8221;In computer graphics bubble sort is popular for its capability to detect a very small error (like swap of just two elements) in almost-sorted arrays and fix it with just linear complexity (2n). For example, it is used in a polygon filling algorithm, where bounding lines are sorted by their x coordinate at a specific scan line (a line parallel to the x axis) and with incrementing y their order changes (two elements are swapped) only at intersections of two lines.&#8221;_</em></li> </ul> </li> </ul> <h3>Merge Sort</h3> <h4>What is it?</h4> <ul> <li>Most common sort, out performs most other sorts.</li> <li>Keep splitting your array in half, until you can&#8217;t anymore &#8211; then sort them back together.</li> <li>Note: you don&#8217;t have to allocate new arrays every time you split, but you probably will end up creating new arrays when you put Humpty back together again.</li> <li>Considered a stable sort.</li> <li>Doesn&#8217;t <em>_sound_</em> more efficient than bubble sort, but the trick is that merging sorted lists is much faster (less repeated work).</li> <li>Best, average, and worst time complexities are O(n log(n)) and the worst space complexity is O(n).</li> <li>Visualizations available at <a href="https://en.wikipedia.org/wiki/Merge_sort">Wikipedia</a> and <a href="https://www.toptal.com/developers/sorting-algorithms/merge-sort">Toptal</a>.</li> </ul> <h4>Strengths</h4> <ul> <li>Solid performer, great all around routine if you don&#8217;t know much about your list going in.</li> <li>In the worst case, merge sort does about 39% fewer comparisons than quicksort does in the average case.</li> </ul> <h4>Weaknesses</h4> <ul> <li>Mildly annoying to program, generally going to want two functions &#8211; one to call and another to merge.</li> <li>Not commonly done inline, because of the merge step.</li> </ul> <h4>When to use it</h4> <ul> <li>This is your default choice.</li> <li>Despite it&#8217;s memory overhead, it scales well because with large data because of it&#8217;s &#8220;divide and conquer&#8221; nature.</li> </ul> <h3>Quicksort</h3> <h4>What is it?</h4> <ul> <li>Breaks a larger list into smaller lists with the use of a pivoting technique</li> <li>Smaller lists use pivoting technique until they are sorted</li> <li>The partitioning is done at random which can be a disadvantage for the list</li> <li>Let&#8217;s consider this example list: 5, 2, 7, 4, 1, 8, 3, 6 <ul> <li>Take the last number and use it as the partition value: 6 (<a href="https://en.wikipedia.org/wiki/Quicksort#Lomuto_partition_scheme">Lumoto Partition Scheme</a>).</li> <li>All values less than the partition stay to the left of the partition value, 6.</li> <li>All values more than the partition value move to the right.</li> <li>5 is less than 6, so it stays where it is.</li> <li>2 is less than 6, so it stays where it is.</li> <li>7 is greater than 6, so it needs to move after it, but doing that requires you to move the pivot down one position, but there&#8217;s already a number there, 3, so three is going to move back to where the 7 was.</li> <li>Now the list is 5, 2, 3, 4, 1, 8, 6, 7.</li> <li>Now we have to look at the 3 that just took the 7&#8217;s place, and it&#8217;s less than 6, so it can stay there.</li> <li>4 and 1 are both less than 6, so we&#8217;ll leave those alone as well.</li> <li>8 is more than 6, so it&#8217;s going to swap places with the 6 now.</li> <li>Now the list is 5, 2, 3, 4, 1, 6, 8, 7.</li> <li>That&#8217;s the end of the first partition sort&#8230;</li> <li>Now we&#8217;ve got two new lists &#8211; the left of the old pivot 6, and the right: 5, 2, 3, 4, 1, <em>_6_,</em> 8, 7.</li> <li>6 is where it will be in the end, so you leave that one alone for now&#8230;</li> <li>1 is the new pivot point of the left list, 7 is the pivot point of the right list&#8230;let&#8217;s start with the left list.</li> <li>5 is greater than 1, so we&#8217;re going to move it after 1, which means 4 needs to move where 5 was.</li> <li>So our remaining comparison operations will transition like this as the 1 moves to the left: <ul> <li>4, 2, 3, 1, 5</li> <li>3, 2, 1, 4, 5</li> <li>2, 1, 3, 4, 5</li> <li>1, 2, 3, 4, 5</li> </ul> </li> <li>That was it for the left list&#8230;</li> <li>Now we need to sort the right list: 8, 7.</li> <li>Which is simple in this case, so the 7 moves and we get: 7, 8.</li> <li>That&#8217;s it for the right&#8230;</li> </ul> </li> <li>Best and average time complexity is O(n log(n)) while the worst is O(n^2). Worst space complexity is O(log(n)).</li> <li>Visualizations available at <a href="https://en.wikipedia.org/wiki/Quicksort">Wikipedia</a> and <a href="https://www.toptal.com/developers/sorting-algorithms/quick-sort">Toptal</a>.</li> </ul> <h4>Strengths</h4> <ul> <li>If you were to choose your pivot intelligently by finding the median value (requires a list scan first), then it will usually outperform the merge sort &#8211; because the sorting happens in place, the space complexity is less and fewer operations</li> </ul> <h4>Weaknesses</h4> <ul> <li>So the interesting thing here is <em>if </em>the list was already sorted, and you do this version, you get to O(n^2) &#8211; terrible performance.</li> </ul> <h3>Selection Sort</h3> <h4>What is it?</h4> <ul> <li>This is how <em>we</em> might actually sort something, like playing cards for example.</li> <li>Iterate through the list, finding the smallest element, and swap it with the first element. Repeat for each additional element in the list. <ul> <li>Consider the values: 1, 3 5, 2, 4.</li> <li>Scan the list looking for the smallest value. After going through the list, we determine that 1 is already in the correct position.</li> <li>Scan the list again looking for the next smallest value (which could be equal to 1 by the way). We eventually find 2. Swap 2 and 3. Now the values are 1, 2, 5, 3, 4.</li> <li>Scan the list again looking for the next smallest value and we eventually find 3. Swap 3 and 5. Now the values are 1, 2, 3, 5, 4.</li> <li>Scan the list again and we eventually find 4. Swap 4 and 5 and now our values are 1, 2, 3, 4, 5.</li> <li>We iterated over the list 4 times.</li> </ul> </li> <li>Best, average, and worst time complexities are O(n^2) and the worst case space complexity is O(1).</li> <li>Visualizations available at <a href="https://en.wikipedia.org/wiki/Selection_sort">Wikipedia</a> and <a href="https://www.toptal.com/developers/sorting-algorithms/selection-sort">Toptal</a>.</li> </ul> <h4>Strengths?</h4> <ul> <li>No recursion necessary meaning no stack overflow exceptions to worry about.</li> <li>Good for small lists</li> <li>Can be advantageous in some circumstances, particularly when memory is limited.</li> </ul> <h4>Weaknesses?</h4> <ul> <li>Similar to bubble sort, it&#8217;s not very efficient. Worst case, the time complexity is O(n^2).</li> <li>We have to scan each element in order to find the smallest value.</li> <li>Not a good choice for large arrays.</li> </ul> <h4>When to use it?</h4> <ul> <li>Good (enough?) for small arrays. <ul> <li>But how many items in the array is still considered small? Some say 10-20 elements, others say 20-30 elements &#8230;</li> </ul> </li> <li>Can result in fewer write operations, which could be important if you&#8217;re sorting (and writing) on Flash memory.</li> </ul> <h3>Heapsort</h3> <h4>What is it?</h4> <ul> <li>Divide the input into a sorted and an unsorted region, then you keep shrinking the unsorted region<br /> by moving the largest number out of the unsorted region.</li> <li>The trick here, is that the the heap data structure allows you to quickly lookup the maximum, so rather than having to look at each item O(n).</li> <li>It&#8217;s &#8220;in place&#8221; meaning low over head, but it is not stable.</li> </ul> <h5>So&#8230;what&#8217;s a heap?</h5> <ul> <li>It&#8217;s a tree where the parent node has a numerical relationship with it&#8217;s children &#8211; either the parent is bigger or equal (max) or smaller or equal (min).</li> <li>For our purpose here, the main point is that the root of the tree is always bigger than either of it&#8217;s children.</li> </ul> <p>So, lets revisit &#8211; start with an unsorted, build a binary max heap, cut the root off, then decide which child is the new root.</p> <ul> <li>Best, average, and worst time complexities are O(n log(n)) and the worst space complexity is O(1).</li> <li>Visualizations available at <a href="https://en.wikipedia.org/wiki/Heapsort">Wikipedia</a> and <a href="https://www.toptal.com/developers/sorting-algorithms/heap-sort">Toptal</a>.</li> </ul> <h4>Strengths</h4> <ul> <li>Better worst case scenario than QuickSort &#8211; O(log n) vs O(n^2).</li> <li>Can be done in place.</li> </ul> <h4>Weaknesses</h4> <ul> <li>On average, performs worse than Quicksort despite the better worse case scenario.</li> </ul> <h4>When to use it</h4> <ul> <li>When you really care about the average sort time and memory usage &#8211; heap is nice and consistent (Similar best, worst, average).</li> </ul> <h3>Binary Search</h3> <ul> <li>The list to be searched has to be sorted first.</li> <li>Divide and conquer algorithm.</li> <li>Keep splitting the list in half and ignore the part you don&#8217;t need.</li> <li>Let&#8217;s consider the following list: 1, 3, 5, 7, 9, 11. <ul> <li>Let&#8217;s say we&#8217;re looking for 9.</li> <li>We divide the list, so we have 1, 3, 5 in one list, 7, 9, 11 in the other.</li> <li>1, 3, 5 can be ignored as we know 9 is greater all of those. Remember, we know the list is already sorted.</li> <li>7, 9, 11 gets split again in the middle&#8230;but because we can&#8217;t evenly split an odd number sized list, we&#8217;ll put 7, 9 on the left and 11 on the right.</li> <li>11 is greater than 9, so we&#8217;ll ignore it&#8230;</li> <li>We&#8217;re just left with 7 and 9.</li> <li>One last comparison and we now know where our item is.</li> </ul> </li> <li>Best time complexity is O(1). Average and worst time complexity is O(log n). Worst space complexity is O(1).</li> </ul> <h3>Graph Traversal</h3> <h4>What is it?</h4> <ul> <li>Graph traversal is the concept of navigating a graph. <ul> <li>This gets tricky. We can do this either via recursion or an iterator. If we choose recursion, we risk stack overflow exceptions. So choose wisely. <ul> <li>Recall that every time we recurse a function, the variables in that function remain on the stack.</li> </ul> </li> </ul> </li> <li>Consider your family tree. There are a couple ways we could search that tree (er, graph).</li> <li>One way, might be to go as far down one path as possible before going to the next node. <ul> <li>Think of researching your ancestry. You might explore the lineage as far back as you can go starting with your mother, before exploring your father&#8217;s lineage.</li> <li>This is a Depth First Search.</li> </ul> </li> <li>Another search, might be to first search all of the nodes on the same level, before going to the next. <ul> <li>Again, considering the family example, you might be more inclined to ask closer family members for money (or help) before going further down the tree. In other words, you might ask a sibling before your parents, or your parents before your grandparents, etc.</li> <li>This is a Breadth First Search.</li> </ul> </li> </ul> <h3>Depth First Search</h3> <h4>What is it?</h4> <ul> <li>If you take a little bit of time up front you can save a lot of time retrieving data.</li> <li>By a little time I mean x.</li> <li>You can implement with recursion or a stack, stack is nice on memory since you only ever have a max of tree depth nodes and it&#8217;s easy to limit your algorithm based on the depth.</li> <li>You can store a pointer back to your parent in order to avoid having to track your path in some situations (binary search tree) but if you&#8217;re in a cyclic graph you need to know the full path.</li> <li>Lots of different types of trees &#8211; generally the more balanced the tree is, the better.</li> </ul> <h4>Strengths</h4> <ul> <li>Simple way of traversing a tree.</li> <li>Better at finding &#8220;farther&#8221; data points.</li> </ul> <h4>Weaknesses</h4> <ul> <li>Worse at finding closer data points.</li> <li>Some people might mention a problem with infinitely deep trees, but that&#8217;s a silly example since you can just as easily imagine a tree that&#8217;s infinitely broad.</li> </ul> <h3>Breadth First Search</h3> <ul> <li>From a starting node, traverse the tree by level, or layer-wise, before moving to the next level.</li> <li>You&#8217;re searching every level of the tree, from the starting node, fully before going on to the next level of the tree.</li> <li>You&#8217;ll visit all peers/siblings on a given level before moving to the next level.</li> <li>Need to track each node in a tree before going to the next level. <ul> <li>Have to track every node and it&#8217;s children in order.</li> <li>Use a queue for storing that info.</li> </ul> </li> </ul> <h4>Strengths</h4> <ul> <li>Good for finding the shortest path between two nodes.</li> <li>According to <a href="https://en.wikipedia.org/wiki/Breadth-first_search#Completeness">Wikipedia</a>: <em>_&#8221;When applied to infinite graphs represented implicitly, breadth-first search will eventually find the goal state, but depth-first search may get lost in parts of the graph that have no goal state and never return.&#8221;_</em></li> </ul> <h4>Weaknesses</h4> <ul> <li>Can take more time if the node being searched for is further down the tree and/or the tree is wide.</li> <li>Can be memory intensive when the tree is wide.</li> </ul> <h2>Resources We Like</h2> <ul> <li><em>The Imposter&#8217;s Handbook</em> (<a href="https://bigmachine.io/products/the-imposters-handbook/">bigmachine.io</a>)</li> <li>Sorting Algorithms Animations (<a href="https://www.toptal.com/developers/sorting-algorithms">sorting-algorithms.com</a>)</li> <li>Big-O Cheat Sheet (<a href="http://bigocheatsheet.com/">bigocheatsheet.com</a>)</li> <li>Sorting Algorithm Stability (<a href="https://en.wikipedia.org/wiki/Sorting_algorithm#Stability">Wikipedia</a>)</li> <li>Bubble Sort (<a href="https://en.wikipedia.org/wiki/Bubble_sort">Wikipedia</a>)</li> <li>Merge Sort (<a href="https://en.wikipedia.org/wiki/Merge_sort">Wikipedia</a>)</li> <li>Quicksort (<a href="https://en.wikipedia.org/wiki/Quicksort">Wikipedia</a>)</li> <li>Selection Sort (<a href="https://en.wikipedia.org/wiki/Selection_sort">Wikipedia</a>)</li> <li>Heapsort (<a href="https://en.wikipedia.org/wiki/Heapsort">Wikipedia</a>)</li> <li>Binary Search Algorithm (<a href="https://en.wikipedia.org/wiki/Binary_search_algorithm">Wikipedia</a>)</li> <li>Graph Traversal (<a href="https://en.wikipedia.org/wiki/Graph_traversal">Wikipedia</a>)</li> <li>Depth-First Search (<a href="https://en.wikipedia.org/wiki/Depth-first_search">Wikipedia</a>)</li> <li>Breadth-First Search (<a href="https://en.wikipedia.org/wiki/Breadth-first_search">Wikipedia</a>)</li> <li><em>When should one use Insertion vs. Selection  sort?</em> (<a href="https://www.quora.com/When-should-one-use-Insertion-vs-Selection-sort">Quora</a>)</li> <li><em>What are the advantages of using BFS over DFS or using DFS over BFS? What are the applications and downsides of each?</em> (<a href="https://www.quora.com/What-are-the-advantages-of-using-BFS-over-DFS-or-using-DFS-over-BFS-What-are-the-applications-and-downsides-of-each">Quora</a>)</li> </ul> <h2>Tip of the Week</h2> <ul> <li>Use <a href="https://www.elastic.co/products/logstash">Logstash</a> to easily ingest your data into Elasticsearch.</li> <li>Preview your markdown in Visual Studio Code. (<a href="https://code.visualstudio.com/docs/languages/markdown">Visual Studio Code Docs</a>) <ul> <li>Bonus tip: Use CTRL+K, M to change your language mode, then use SHIFT+ALT+F to format the document. Especially useful for those JSON blobs you&#8217;re inspecting.</li> </ul> </li> <li>Navigate your bookmarks using the Bookmark Navigator extension for Chrome. (<a href="https://chrome.google.com/webstore/detail/bookmark-navigator/bfibpphfhdpgkmbpkfmhdiklgcfmmkha?hl=en">Chrome Web Store</a>)</li> </ul>
]]>
      </content:encoded>
      <enclosure url="http://media.blubrry.com/codingblocks/www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/codingblocks/coding-blocks-episode-84.mp3" length="65128384" type="audio/mpeg" />
      <itunes:subtitle>
        It's time we discuss algorithms we all need to know as we continue diving into Rob Conery's The Imposter's Handbook while Michael will read anything, Allen questions Greenland's name, and Joe talks wormholes.
      </itunes:subtitle>
      <itunes:summary>
        It's time we discuss algorithms we all need to know as we continue diving into Rob Conery's The Imposter's Handbook while Michael will read anything, Allen questions Greenland's name, and Joe talks wormholes.
      </itunes:summary>
      <itunes:author>
        Allen Underwood, Michael Outlaw, Joe Zack : Software Developers
      </itunes:author>
      <itunes:image href="https://www.codingblocks.net/wp-content/uploads/powerpress/codingblocks-itunes.jpg" />
      <itunes:explicit>clean</itunes:explicit>
      <itunes:duration>2:15:22</itunes:duration>
    </item>
    <item>
      <title>83. Search Driven Apps</title>
      <link>
        https://www.codingblocks.net/podcast/search-driven-apps/
      </link>
      <pubDate>Mon, 11 Jun 2018 01:28:52 +0000</pubDate>
      <guid isPermaLink="false">https://www.codingblocks.net/?p=3944</guid>
      <comments>
        https://www.codingblocks.net/podcast/search-driven-apps/#comments
      </comments>
      <wfw:commentRss>
        https://www.codingblocks.net/podcast/search-driven-apps/feed/
      </wfw:commentRss>
      <slash:comments>18</slash:comments>
      <category>
        <![CDATA[ Podcasts ]]>
      </category>
      <category>
        <![CDATA[ AWS Cloudsearch ]]>
      </category>
      <category>
        <![CDATA[ AWS Elasticsearch Service ]]>
      </category>
      <category>
        <![CDATA[ Azure Search ]]>
      </category>
      <category>
        <![CDATA[ database ]]>
      </category>
      <category>
        <![CDATA[ Elastic Stack ]]>
      </category>
      <category>
        <![CDATA[ Elasticsearch ]]>
      </category>
      <category>
        <![CDATA[ ELK ]]>
      </category>
      <category>
        <![CDATA[ forward index ]]>
      </category>
      <category>
        <![CDATA[ indexes ]]>
      </category>
      <category>
        <![CDATA[ inverted index ]]>
      </category>
      <category>
        <![CDATA[ Lucene ]]>
      </category>
      <category>
        <![CDATA[ nosql ]]>
      </category>
      <category>
        <![CDATA[ reverse index ]]>
      </category>
      <category>
        <![CDATA[ Rob Conery ]]>
      </category>
      <category>
        <![CDATA[ search engine ]]>
      </category>
      <category>
        <![CDATA[ Solr ]]>
      </category>
      <category>
        <![CDATA[ sql ]]>
      </category>
      <category>
        <![CDATA[ The Imposter's Handbook ]]>
      </category>
      <description>
        <img width="150" height="99" src="https://www.codingblocks.net/wp-content/uploads/2018/06/Episode083.jpg" class="webfeedsFeaturedVisual wp-post-image" alt="" style="display: block; margin-bottom: 5px; clear:both;max-width: 100%;" /><img width="150" height="99" src="https://www.codingblocks.net/wp-content/uploads/2018/06/Episode083.jpg" class="attachment-thumbnail size-thumbnail wp-post-image" alt="" style="float:left; margin:0 15px 15px 0;" />We're talking databases, indexes, search engines, and why they're basically microwaves in this episode while Joe wears a polo, Allen's quick brown fox jumps over whatever, and Michael gives out fake URLs.
      </description>
      <content:encoded>
        <![CDATA[
<img width="150" height="99" src="https://www.codingblocks.net/wp-content/uploads/2018/06/Episode083.jpg" class="webfeedsFeaturedVisual wp-post-image" alt="" style="display: block; margin-bottom: 5px; clear:both;max-width: 100%;" /><img width="150" height="99" src="https://www.codingblocks.net/wp-content/uploads/2018/06/Episode083.jpg" class="attachment-thumbnail size-thumbnail wp-post-image" alt="" style="float:left; margin:0 15px 15px 0;" /><p>We&#8217;re talking databases, indexes, search engines, and why they&#8217;re basically microwaves in this episode while Joe wears a polo, Allen&#8217;s quick brown fox jumps over whatever, and Michael gives out fake URLs.</p> <p><span id="more-3944"></span></p> <h2>Sponsors</h2> <ul> <li><a href="/datadog">Datadog.com/codingblocks</a> &#8211; Sign up today for a free 14 day trial <strong><em>and</em></strong> get a free Datadog t-shirt after creating your first dashboard.</li> </ul> <h2>Survey Says</h2> <div class='bootstrap-yop'> <div class="basic-yop-poll-container" style="background-color:#333333;border:0px;border-style:solid;border-color:#ffffff;border-radius:3px;padding:0px;"data-id="61"data-temp="basic"data-skin="minimal"data-cscheme="black"data-cap="0"data-access="guest,wordpress"data-tid=""data-uid="b8461147ae3ec2c8bedb535dc2921c68"data-resdet="percentages"data-show-results-to="guest,registered"data-show-results-moment="after-vote"data-show-results-only="false"data-show-results-as="bar"data-sort-results-by="as-defined"data-sort-results-rule="asc"data-gdpr="no"data-gdpr-sol="consent"><div class="basic-canvas"></div><div class="basic-inner"><div class="basic-message hide" style="background-color:#ffffff;border:0px;border-style:solid;border-color:#ffffff;border-radius:0px;padding:0px;color:#ff0000;font-size:small;""><p></p></div><div class="basic-overlay hide"><div class="basic-vote-options"><div class="basic-anonymous"><button type="button" class="btn btn-default"><i class="fa fa-user-secret" aria-hidden="true"></i>Anonymous Vote</button></div><div class="basic-wordpress"><button type="button" class="btn btn-default"><i class="fa fa-wordpress" aria-hidden="true"></i>Sign in with Wordpress</button></div></div><div class="basic-preloader hide"><div class="basic-windows8"><div class="basic-wBall basic-wBall_1"><div class="basic-wInnerBall"></div></div><div class="basic-wBall basic-Ball_2"><div class="basic-wInnerBall"></div></div><div class="basic-wBall basic-wBall_3"><div class="basic-wInnerBall"></div></div><div class="basic-wBall basic-wBall_4"><div class="basic-wInnerBall"></div></div><div class="basic-wBall basic-wBall_5"><div class="basic-wInnerBall"></div></div></div></div></div><form class="basic-form"><input type="hidden" name="_token" value="66538a3547"><div class="basic-elements"><div class="basic-element basic-question" style="background-color:#f5f5f5;border:0px;border-style: solid;border-color:#ffffff;border-radius:3px;padding:10px;color:#000000;font-size:small;"data-id="61"data-uid="59003f8e7b592f9bc67ac7ea4f3ec8c5"data-type="question"data-question-type="text"data-min="1"data-max="3"data-display="vertical"data-colnum="2"><div class="basic-question-title">Now that you had some time to digest the news, how do you feel about Microsoft&#039;s acquisition of GitHub?</div><ul class="basic-answers"><li class="basic-answer" style="background-color:#f5f5f5;border:0px;border-style: solid;border-color:#ffffff;border-radius:0px;padding:0px;color:#000000;font-size:small;" data-id="938" data-type="text" data-vn="43" data-color="#fbd55e"><div class="basic-canvas"><span class="basic-howmuch"></span></div><div class="basic-inner"><label class="basic-label"><input type="radio" name="answer[61]" value="938"><span class="basic-answer-content"><span class="basic-text">Very excited! Looking forward to the awesome things Microsoft will add to GitHub.</span></span></label></div></li><li class="basic-answer" style="background-color:#f5f5f5;border:0px;border-style: solid;border-color:#ffffff;border-radius:0px;padding:0px;color:#000000;font-size:small;" data-id="939" data-type="text" data-vn="41" data-color="#fbd55e"><div class="basic-canvas"><span class="basic-howmuch"></span></div><div class="basic-inner"><label class="basic-label"><input type="radio" name="answer[61]" value="939"><span class="basic-answer-content"><span class="basic-text">I&#039;m concerned but not enough to do anything about it. Yet.</span></span></label></div></li><li class="basic-answer" style="background-color:#f5f5f5;border:0px;border-style: solid;border-color:#ffffff;border-radius:0px;padding:0px;color:#000000;font-size:small;" data-id="940" data-type="text" data-vn="41" data-color="#fbd55e"><div class="basic-canvas"><span class="basic-howmuch"></span></div><div class="basic-inner"><label class="basic-label"><input type="radio" name="answer[61]" value="940"><span class="basic-answer-content"><span class="basic-text">I don&#039;t care. At all. Should I?</span></span></label></div></li><li class="basic-answer" style="background-color:#f5f5f5;border:0px;border-style: solid;border-color:#ffffff;border-radius:0px;padding:0px;color:#000000;font-size:small;" data-id="942" data-type="text" data-vn="2" data-color="#fbd55e"><div class="basic-canvas"><span class="basic-howmuch"></span></div><div class="basic-inner"><label class="basic-label"><input type="radio" name="answer[61]" value="942"><span class="basic-answer-content"><span class="basic-text">OMG the sky is falling. Why? How could we let this happen?</span></span></label></div></li><li class="basic-answer" style="background-color:#f5f5f5;border:0px;border-style: solid;border-color:#ffffff;border-radius:0px;padding:0px;color:#000000;font-size:small;" data-id="959" data-type="text" data-vn="8" data-color="#000000"><div class="basic-canvas"><span class="basic-howmuch"></span></div><div class="basic-inner"><label class="basic-label"><input type="radio" name="answer[61]" value="959"><span class="basic-answer-content"><span class="basic-text">Already packed up my code and moved to GitLab.</span></span></label></div></li></ul></div></div><div class="basic-vote "><a href="#" class="button basic-vote-button" style="background:#ffffff;border:0px;border-style: solid;border-color:#000000;border-radius:3px;padding:0px;color:#333333;font-size:small;">vote</a></div></form></div></div> </div> <p>&nbsp;</p> <h2>News</h2> <ul> <li>Thank you to everyone that left us a review: <ul> <li>iTunes &#8211; vr6apparatus, The All Ighty Ollar, BonerGs, MatiasWasAlreadyTaken, galusssss</li> <li>Stitcher &#8211; Vothis, JavaRuns100BillionDevices, SoulSurvivor, Twentyone</li> </ul> </li> <li>The Cynical Developer (James Studdart) has Sean Martz on the show to talk about transitioning from a sys admin to a developer. (<a href="https://cynicaldeveloper.com/podcast/79/">Cynical Developer Episode 79</a>)</li> <li>In the Orlando area on June 21? Come see Joe&#8217;s talk on Building Search Driven Apps with Elasticsearch at the Orlando Backend Developer&#8217;s Meetup. <ul> <li>Sign up for <em>Elasticsearch and Go for the Backend</em> at <a href="https://www.meetup.com/Orlando-Backend-Developers-Meetup/events/250044672/">Meetup</a></li> <li>Source code and Slides over on <a href="https://github.com/codingblocks/search-driven-apps">GitHub</a></li> </ul> </li> <li>Joe invents a new way to listen to podcasts &#8230; by topic. <ul> <li>Search and listen by topic at <a href="https://qit.cloud/">https://qit.cloud/</a></li> <li>Source code available on <a href="https://github.com/codingblocks/podcast-app">GitHub</a></li> </ul> </li> </ul> <h2>Search Driven Apps</h2> <h3>What&#8217;s the problem? Why do we need search driven apps?</h3> <ul> <li>Search is a core tenant of modern computing <ul> <li>Google, Shopping, Cortana, Spotlight, Contacts</li> <li>Can&#8217;t use the phone, listen to music, buy underwear or watch TV without searching</li> </ul> </li> <li>In some cases, the number of items we&#8217;re searching are small, can get away with a simple LIKE % search</li> <li>But people aren&#8217;t very good at searching, and Google has spoiled us <ul> <li>Auto-Complete helps with typos <ul> <li>What if there&#8217;s too much data? Or the user doesn&#8217;t know what the thing is called?</li> <li>And what if there&#8217;s a lot of data?</li> </ul> </li> </ul> </li> </ul> <h3>Some interesting numbers:</h3> <ul> <li>Google servers 40k searches … per <strong>second</strong> (<a href="https://ardorseo.com/blog/how-many-google-searches-per-day-2018/">Ardor Seo</a>)</li> <li>Amazon sells over 500M products (<a href="https://www.scrapehero.com/many-products-amazon-sell-january-2018/">ScrapeHero</a>)</li> <li>Splunk indexes 100’s of TB per day</li> <li>5B videos watched on YouTube every <strong>day</strong> (<a href="https://merchdope.com/youtube-statistics/">MerchDope</a>)</li> </ul> <p>Q: How are these services doing it?<br /> A: Lots and lots of joins, and LIKE clauses?</p> <h3>Relational Databases &#8230;</h3> <ul> <li>Don’t scale horizontally very well</li> <li>Are designed for ACID instead of BASE <ul> <li>ACID <ul> <li>From <a href="https://en.wikipedia.org/wiki/ACID">Wikipedia</a>: <ul> <li>Atomicity &#8211; requires that each transaction be &#8220;all or nothing&#8221;:</li> <li>Consistency &#8211; ensures that any transaction will bring the database from one valid state to another.</li> <li>Isolation &#8211; ensures that the concurrent execution of transactions results in a system state that would be obtained if transactions were executed sequentially</li> <li>Durability &#8211; ensures that once a transaction has been committed, it will remain so, even in the event of power loss, crashes, or errors</li> </ul> </li> </ul> </li> <li>BASE &#8211; Basic Availability, Soft State, Eventual Consistency</li> </ul> </li> <li>In regards to the CAP Theorem, Relational DB have an emphasis on Consistency</li> <li>CAP Theorem <ul> <li>From <a href="https://en.wikipedia.org/wiki/CAP_theorem">Wikipedia</a>: <ul> <li>Consistency &#8211; every read receives the most recent write or an error</li> <li>Availability &#8211; every request receives a (non-error) response – without guarantee that it contains the most recent write</li> <li>Partition Tolerance &#8211; the system continues to operate despite an arbitrary number of messages being dropped (or delayed) by the network between nodes</li> </ul> </li> </ul> </li> <li>Shredding is inefficient</li> <li>Writing dynamic ANSI SQL is the pits</li> </ul> <h4>DB vs Search Engine&#8230;why not just do it all in SQL?</h4> <ul> <li>Why not just turn on full text search in SQL Server? <ul> <li>Full-Text Search (<a href="https://msdn.microsoft.com/en-us/library/ms142571(v=sql.120).aspx">Microsoft Developer Network</a>)</li> </ul> </li> <li>Elasticsearch Search Reference (<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/search.html">Elastic Docs</a>)</li> <li>Ability to search across all indexes, quickly and easily&#8230; <ul> <li>Fast aggregations (facets)</li> <li>Ranged aggregations</li> <li>Paging</li> <li>Scale</li> <li>Migrations / Versions</li> <li>Simpler query requests</li> </ul> </li> </ul> <h4>Ever written a SQL query that started out simple</h4> <ul> <li>And ended up a monster?</li> <li>Start with a LIKE</li> <li>Add some dynamic JOINs</li> <li>In clauses lead to temp tables</li> <li>Paging leads to support for multi-page actions &#8230;</li> <li>CTE, Pivoting, OpenQuery</li> </ul> <p>Writing dynamic SQL stinks.</p> <h3>How Inverted Index Searches solve the problem</h3> <p>So … why don’t we use a NoSQL implementation, denormalize the heck out of it, and then index the heck out of it, then map reduce the heck out of it – Well… you just described a basic search engine!</p> <ul> <li>NoSQL DB: Horizontal Scaling</li> <li>DeNormalize our data</li> <li>Index everything!</li> <li>Map/Reduce to search quickly</li> <li>Declarative language</li> </ul> <h4>A little bit about indexes &#8230;</h4> <ul> <li>Forward index, and &#8230;</li> <li>Inverted index (<a href="https://en.wikipedia.org/wiki/Inverted_index">Wikipedia</a>)</li> <li>Let&#8217;s consider them both at the same time using a book analogy. <ul> <li>A table of contents is a <em>_forward index_</em>. It tells you where to go in the book for a &#8220;document&#8221; (aka a chapter).</li> <li>The index you&#8217;ve seen in books is an <em>_inverted index_</em>. It tells you where to go in the book for all uses of the relevant words.</li> <li>Great answer on <a href="https://stackoverflow.com/questions/7727686/whats-the-difference-between-an-inverted-index-and-a-plain-old-index">Stack Overflow</a>.</li> </ul> </li> </ul> <h4>But What&#8217;s a Reverse Index?</h4> <ul> <li>Let&#8217;s consider a row in a database the &#8220;document&#8221; we want.</li> <li>A typical DB index would be a forward index. In other words, when we want row with ID = 123, we can seek right to it. <ul> <li>Or put another way, a typical DB index acts like a table of contents for the &#8220;document&#8221; (i.e. row) we want</li> </ul> </li> <li>Busy databases/indexes can suffer from index block contention, especially those indexes for monotonically increasing sequences. Like numerical based primary keys. <ul> <li>Consider that the index for a table is stored across several &#8220;blocks&#8221;. Let&#8217;s hypothetically say each block contains 100 keys.</li> <li>Let&#8217;s also consider our table has a integer primary key that sequentially increases. So we have keys like 123, 124, 125, etc.</li> <li>So, 0-99 are in the first block, 100-199 are in the second block, 200-299 are in the third block, etc.</li> <li>If 100 write requests happen at the same time, it&#8217;s possible they could all queue up to write to the same block.</li> <li>Best case, two blocks given that scenario</li> <li>This is what a reverse index aims to solve.</li> </ul> </li> <li>A reverse index simply reverses the key <ul> <li>So for key = 123, it would go in the block as 321 (i.e. in our &#8220;300&#8221; block) and key = 124 would go in another block (in our &#8220;400&#8221; block) as 421, etc.</li> </ul> </li> <li>This way reads/writes are distributed.</li> <li>In the case of 100 concurrent write requests, they would be spread across 10 different indexes given this scenario.</li> </ul> <h3>Back to Inverted Indexes</h3> <p>Take the sentence &#8220;The Quick Brown Fox Jumps Over the Lazy Dog&#8221;</p> <ul> <li>Store the entire document</li> <li>Throw away the &#8220;stop&#8221; words (like &#8220;the&#8221;)</li> <li>Break the sentence down into tokens for a hash table</li> <li>Each token contains an array of pointers to records</li> <li>When the user searches for &#8220;lazy fox&#8221; we can break that sentence into tokens, and return the records that are pointed to by our indexes</li> <li>Advanced rules apply: synonyms, antonyms, stemming, pluralization, scoring, etc</li> <li>Example of synonym: &#8220;PWA&#8221; and &#8220;Progressive Web Apps&#8221; or &#8220;.Net&#8221; and &#8220;Dot Net&#8221; or &#8220;JS&#8221; and &#8220;JavaScript&#8221;</li> <li>Because of the storage mechanism, counting is easy too &#8211; we don&#8217;t even need to fetch the document, just count pointers</li> </ul> <h3>Inverted Index Search Engines</h3> <ul> <li>Slow to Write, Fast to Read (Sort of&#8230;there&#8217;s near real time on many now)</li> <li>NoSQL before it was called NoSQL</li> <li>Scale Super Well</li> <li>Wicked Fast Reads</li> <li>Support Complex Filters</li> <li>Declarative syntax</li> </ul> <h3>Popular Search Engines</h3> <ul> <li><a href="https://www.elastic.co/"> Elasticsearch</a> (and the <a href="https://www.elastic.co/products">Elastic Stack</a>) <ul> <li>Elasticsearch is open source (<a href="https://github.com/elastic/elasticsearch">GitHub</a>), as well as most of the other products in the Elastic Stack</li> <li>Elasticsearch BV (the company behind Elasticsearch) recently made the source code for X-Pack available (still requires a license to use) (<a href="https://www.elastic.co/products/x-pack/open">Elastic blog announcement</a>) <ul> <li>X-Pack adds additional functionality to Elasticsearch including security, alerting, monitoring, reporting, graph analytics, dedicated APM UIs, and machine learning.</li> </ul> </li> </ul> </li> <li><a href="https://lucene.apache.org/">Apache Lucene</a></li> <li><a href="http://lucene.apache.org/solr/">Apache Solr</a> (built on Lucene)</li> <li><a href="https://aws.amazon.com/cloudsearch/">AWS CloudSearch</a></li> <li><a href="https://aws.amazon.com/elasticsearch-service/">AWS Elasticsearch Service</a></li> <li><a href="https://azure.microsoft.com/en-us/services/search/">Azure Search</a></li> </ul> <h2>Resources We Like</h2> <ul> <li><a href="https://github.com/codingblocks/search-driven-apps">https://github.com/codingblocks/search-driven-apps</a></li> <li><em>The Imposter&#8217;s Handbook</em> (<a href="https://bigmachine.io/products/the-imposters-handbook">bigmachine.io</a>)</li> <li><em>37 Mind Blowing YouTube Facts, Figures and Statistics &#8211; 2018</em> (<a href="https://merchdope.com/youtube-statistics/">MerchDope</a>)</li> <li><em>How many Google searches per day on average in 2018?</em> (<a href="https://ardorseo.com/blog/how-many-google-searches-per-day-2018/">Ardor Seo</a>)</li> <li><em>How Many Products Does Amazon Sell? &#8211; January 2018</em> (<a href="https://www.scrapehero.com/many-products-amazon-sell-january-2018/">ScrapeHero</a>)</li> <li>ACID (<a href="https://en.wikipedia.org/wiki/ACID">Wikipedia</a>)</li> <li>CAP Theorem (<a href="https://en.wikipedia.org/wiki/CAP_theorem">Wikipedia</a>)</li> <li>Inverted Index (<a href="https://en.wikipedia.org/wiki/Inverted_index">Wikipedia</a>)</li> <li><em>What&#8217;s the difference between an inverted index and a plain old index?</em> (<a href="https://stackoverflow.com/questions/7727686/whats-the-difference-between-an-inverted-index-and-a-plain-old-index">Stack Overflow</a>)</li> <li>Reverse Index (<a href="https://en.wikipedia.org/wiki/Reverse_index">Wikipedia</a>)</li> <li>Introduction To Reverse Key Indexes: Part 1 (<a href="https://richardfoote.wordpress.com/2008/01/14/introduction-to-reverse-key-indexes-part-i/">Richard Foote&#8217;s Oracle Blog</a>)</li> <li><em>How does database indexing work?</em> (<a href="https://stackoverflow.com/questions/1108/how-does-database-indexing-work">Stack Overflow</a>)</li> <li>Database Index (<a href="https://en.wikipedia.org/wiki/Database_index">Wikipedia</a>)</li> <li><em>Elasticsearch from the bottom up</em> (<a href="https://www.elastic.co/blog/found-elasticsearch-from-the-bottom-up">Blog</a>, <a href="https://youtu.be/PpX7J-G2PEo">YouTube</a>)</li> <li>Stack Overflow / Stack Exchange performance statistics (<a href="https://stackexchange.com/performance">Stack Exchange</a>)</li> </ul> <h2>Tip of the Week</h2> <ul> <li>Pattern matching with <em>is</em> (<a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/keywords/is#pattern-matching-with-is">Microsoft Docs</a>)</li> <li>Use <em>git cherry-pick -n</em> to pick multiple commits into a single new commit. (<a href="https://git-scm.com/docs/git-cherry-pick">git-cherry-pick Documentation</a>)</li> <li>Looking for a Python fiddle? Try <a href="https://pyfiddle.io/">https://pyfiddle.io/</a>.</li> <li>Google&#8217;s Python Class (<a href="https://developers.google.com/edu/python/">Google for Education</a>)</li> <li>Execute T-SQL from Visual Studio Code using the mssql extension <ul> <li>Extension available in the <a href="https://marketplace.visualstudio.com/items?itemName=ms-mssql.mssql">Visual Studio Marketplace</a></li> <li>Source code available on <a href="https://github.com/Microsoft/vscode-mssql">GitHub</a></li> </ul> </li> <li>Use <em>git bisect</em> to find the commit that broke your code. (<a href="https://git-scm.com/docs/git-bisect">git-bisect Documentation</a>)</li> <li>Build, deploy, and manage your next web project with all of the features of an enterprise on <a href="https://www.netlify.com/">Netlify</a>.</li> </ul>
]]>
      </content:encoded>
      <enclosure url="http://media.blubrry.com/codingblocks/www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/codingblocks/coding-blocks-episode-83.mp3" length="66692288" type="audio/mpeg" />
      <itunes:subtitle>
        We're talking databases, indexes, search engines, and why they're basically microwaves in this episode while Joe wears a polo, Allen's quick brown fox jumps over whatever, and Michael gives out fake URLs.
      </itunes:subtitle>
      <itunes:summary>
        We're talking databases, indexes, search engines, and why they're basically microwaves in this episode while Joe wears a polo, Allen's quick brown fox jumps over whatever, and Michael gives out fake URLs.
      </itunes:summary>
      <itunes:author>
        Allen Underwood, Michael Outlaw, Joe Zack : Software Developers
      </itunes:author>
      <itunes:image href="https://www.codingblocks.net/wp-content/uploads/powerpress/codingblocks-itunes.jpg" />
      <itunes:explicit>clean</itunes:explicit>
      <itunes:duration>2:18:37</itunes:duration>
    </item>
    <item>
      <title>82. Programmer Strengths and Weaknesses</title>
      <link>
        https://www.codingblocks.net/podcast/programmer-strengths-and-weaknesses/
      </link>
      <pubDate>Mon, 28 May 2018 17:53:35 +0000</pubDate>
      <guid isPermaLink="false">https://www.codingblocks.net/?p=3920</guid>
      <comments>
        https://www.codingblocks.net/podcast/programmer-strengths-and-weaknesses/#comments
      </comments>
      <wfw:commentRss>
        https://www.codingblocks.net/podcast/programmer-strengths-and-weaknesses/feed/
      </wfw:commentRss>
      <slash:comments>63</slash:comments>
      <category>
        <![CDATA[ Podcasts ]]>
      </category>
      <category>
        <![CDATA[ knowledge gap ]]>
      </category>
      <category>
        <![CDATA[ Rob Conery ]]>
      </category>
      <category>
        <![CDATA[ skills gap ]]>
      </category>
      <category>
        <![CDATA[ technical interview ]]>
      </category>
      <category>
        <![CDATA[ The Imposter's Handbook ]]>
      </category>
      <description>
        <img width="150" height="99" src="https://www.codingblocks.net/wp-content/uploads/2018/05/Episode082.jpg" class="webfeedsFeaturedVisual wp-post-image" alt="" style="display: block; margin-bottom: 5px; clear:both;max-width: 100%;" /><img width="150" height="99" src="https://www.codingblocks.net/wp-content/uploads/2018/05/Episode082.jpg" class="attachment-thumbnail size-thumbnail wp-post-image" alt="" style="float:left; margin:0 15px 15px 0;" />Inspired by Rob Conery's The Imposter's Handbook, we take an introspective look at ourselves to find two weaknesses and one strength while Allen shows off his vocal prowess in song, Joe needs a list, and Michael is a dash.
      </description>
      <content:encoded>
        <![CDATA[
<img width="150" height="99" src="https://www.codingblocks.net/wp-content/uploads/2018/05/Episode082.jpg" class="webfeedsFeaturedVisual wp-post-image" alt="" style="display: block; margin-bottom: 5px; clear:both;max-width: 100%;" /><img width="150" height="99" src="https://www.codingblocks.net/wp-co
]]>
        <![CDATA[
ntent/uploads/2018/05/Episode082.jpg" class="attachment-thumbnail size-thumbnail wp-post-image" alt="" style="float:left; margin:0 15px 15px 0;" /><p>Inspired by Rob Conery&#8217;s <a href="https://bigmachine.io/products/the-imposters-handbook/"><em>The Imposter&#8217;s Handbook</em></a>, we take an introspective look at ourselves to find two weaknesses and one strength while Allen shows off his vocal prowess in song, Joe needs a list, and Michael is a dash.<span id="more-3920"></span></p> <h2>Sponsors</h2> <ul> <li><a href="/datadog">Datadog.com/codingblocks</a> &#8211; Sign up today for a free 14 day trial <strong><em>and</em></strong> get a free Datadog t-shirt after creating your first dashboard.</li> </ul> <h2>Survey</h2> <div class='bootstrap-yop'> <div class="basic-yop-poll-container" style="background-color:#333333;border:0px;border-style:solid;border-color:#ffffff;border-radius:3px;padding:0px;"data-id="59"data-temp="basic"data-skin="minimal"data-cscheme="black"data-cap="0"data-access="guest,wordpress"data-tid=""data-uid="fc9724ad9fc911bf74f110a3039447cb"data-resdet="percentages"data-show-results-to="guest,registered"data-show-results-moment="after-vote"data-show-results-only="false"data-show-results-as="bar"data-sort-results-by="as-defined"data-sort-results-rule="asc"data-gdpr="no"data-gdpr-sol="consent"><div class="basic-canvas"></div><div class="basic-inner"><div class="basic-message hide" style="background-color:#ffffff;border:0px;border-style:solid;border-color:#ffffff;border-radius:0px;padding:0px;color:#ff0000;font-size:small;""><p></p></div><div class="basic-overlay hide"><div class="basic-vote-options"><div class="basic-anonymous"><button type="button" class="btn btn-default"><i class="fa fa-user-secret" aria-hidden="true"></i>Anonymous Vote</button></div><div class="basic-wordpress"><button type="button" class="btn btn-default"><i class="fa fa-wordpress" aria-hidden="true"></i>Sign in with Wordpress</button></div></div><div class="basic-preloader hide"><div class="basic-windows8"><div class="basic-wBall basic-wBall_1"><div class="basic-wInnerBall"></div></div><div class="basic-wBall basic-Ball_2"><div class="basic-wInnerBall"></div></div><div class="basic-wBall basic-wBall_3"><div class="basic-wInnerBall"></div></div><div class="basic-wBall basic-wBall_4"><div class="basic-wInnerBall"></div></div><div class="basic-wBall basic-wBall_5"><div class="basic-wInnerBall"></div></div></div></div></div><form class="basic-form"><input type="hidden" name="_token" value="4bc98836de"><div class="basic-elements"><div class="basic-element basic-question" style="background-color:#f5f5f5;border:0px;border-style: solid;border-color:#ffffff;border-radius:3px;padding:10px;color:#000000;font-size:small;"data-id="59"data-uid="3da305804c6b388afcbd1ebf99fae16c"data-type="question"data-question-type="text"data-min="1"data-max="3"data-display="vertical"data-colnum="2"><div class="basic-question-title">Do you regularly evaluate your weaknesses in an effort to strengthen them?</div><ul class="basic-answers"><li class="basic-answer" style="background-color:#f5f5f5;border:0px;border-style: solid;border-color:#ffffff;border-radius:0px;padding:0px;color:#000000;font-size:small;" data-id="913" data-type="text" data-vn="35" data-color="#fbd55e"><div class="basic-canvas"><span class="basic-howmuch"></span></div><div class="basic-inner"><label class="basic-label"><input type="radio" name="answer[59]" value="913"><span class="basic-answer-content"><span class="basic-text">OMG. Daily.</span></span></label></div></li><li class="basic-answer" style="background-color:#f5f5f5;border:0px;border-style: solid;border-color:#ffffff;border-radius:0px;padding:0px;color:#000000;font-size:small;" data-id="914" data-type="text" data-vn="72" data-color="#fbd55e"><div class="basic-canvas"><span class="basic-howmuch"></span></div><div class="basic-inner"><label class="basic-label"><input type="radio" name="answer[59]" value="914"><span class="basic-answer-content"><span class="basic-text">I try to pick up a new skill or get better at an existing one every few months.</span></span></label></div></li><li class="basic-answer" style="background-color:#f5f5f5;border:0px;border-style: solid;border-color:#ffffff;border-radius:0px;padding:0px;color:#000000;font-size:small;" data-id="915" data-type="text" data-vn="35" data-color="#fbd55e"><div class="basic-canvas"><span class="basic-howmuch"></span></div><div class="basic-inner"><label class="basic-label"><input type="radio" name="answer[59]" value="915"><span class="basic-answer-content"><span class="basic-text">Yeah, but realistically, probably only once or twice a year.</span></span></label></div></li><li class="basic-answer" style="background-color:#f5f5f5;border:0px;border-style: solid;border-color:#ffffff;border-radius:0px;padding:0px;color:#000000;font-size:small;" data-id="926" data-type="text" data-vn="37" data-color="#fbd55e"><div class="basic-canvas"><span class="basic-howmuch"></span></div><div class="basic-inner"><label class="basic-label"><input type="radio" name="answer[59]" value="926"><span class="basic-answer-content"><span class="basic-text">I learn what I want to learn, when I want to learn it.</span></span></label></div></li><li class="basic-answer" style="background-color:#f5f5f5;border:0px;border-style: solid;border-color:#ffffff;border-radius:0px;padding:0px;color:#000000;font-size:small;" data-id="934" data-type="text" data-vn="21" data-color="#000000"><div class="basic-canvas"><span class="basic-howmuch"></span></div><div class="basic-inner"><label class="basic-label"><input type="radio" name="answer[59]" value="934"><span class="basic-answer-content"><span class="basic-text">No, that&#039;s why I listen to you guys.</span></span></label></div></li><li class="basic-answer" style="background-color:#f5f5f5;border:0px;border-style: solid;border-color:#ffffff;border-radius:0px;padding:0px;color:#000000;font-size:small;" data-id="935" data-type="text" data-vn="0" data-color="#000000"><div class="basic-canvas"><span class="basic-howmuch"></span></div><div class="basic-inner"><label class="basic-label"><input type="radio" name="answer[59]" value="935"><span class="basic-answer-content"><span class="basic-text">Why? I already know everything I need to know</span></span></label></div></li></ul></div></div><div class="basic-vote "><a href="#" class="button basic-vote-button" style="background:#ffffff;border:0px;border-style: solid;border-color:#000000;border-radius:3px;padding:0px;color:#333333;font-size:small;">vote</a></div></form></div></div> </div> <p>&nbsp;</p> <h2>News</h2> <ul> <li>Thanks to all that left us a review: <ul> <li>iTunes &#8211; JonJmz, Cweldfwch, changed_perspective, Steve5553567</li> <li>Stitcher &#8211; NickTheGreek, DizzleMcShizzle, kettch</li> </ul> </li> <li>Come out to see Joe give his talk at the Orlando Backend Developers Meetup June 21 on Building Search Driven Apps with Elasticsearch <ul> <li><a href="https://www.meetup.com/Orlando-Backend-Developers-Meetup/events/250044672/">https://www.meetup.com/Orlando-Backend-Developers-Meetup/events/250044672/</a></li> <li><a href="https://github.com/codingblocks/search-driven-apps">https://github.com/codingblocks/search-driven-apps</a></li> </ul> </li> </ul> <h2>Two Weaknesses, One Strength</h2> <h3>Assess your Knowledge</h3> <ul> <li>Look at the StackOverflow Survey Results</li> <li>Try building something, writing, or teaching about your subject</li> <li>Read the Imposter&#8217;s Handbook, Listen to podcasts, go to meetups, etc, things that introduce new perspectives &#8211; diversify!</li> </ul> <h3>Build your Skills</h3> <ul> <li>LinkedIn and Pluralsight have self assessments</li> <li>If it&#8217;s something measurable, establish a baseline! <ul> <li>Code Wars, Code Fights, HackerRank, Interviewing.IO</li> </ul> </li> <li>Find a friend! <ul> <li>Ask for specific feedback (are my variable names clear, is my project screaming architecture?)</li> <li>Never been easier!</li> </ul> </li> <li>Worst case scenario: assess yourself, but take it with a grain of salt <ul> <li>Beware the Dunning Krueger effect</li> <li>Record yourself</li> </ul> </li> </ul> <h3>Our Weaknesses</h3> <ul> <li>Joe&#8217;s <ul> <li>Modern UI development</li> <li>Machine Learning Trend</li> </ul> </li> <li>Allen&#8217;s <ul> <li>Time Boxing / Non-Targeted Learning</li> <li>Academic / Big O / Algorithm Forgotten Knowledge</li> </ul> </li> <li>Michael&#8217;s <ul> <li>Python</li> <li>Algorithms</li> </ul> </li> </ul> <h4>Honorable mentions</h4> <ul> <li>Estimating</li> <li>Organization</li> </ul> <h3>Our Strengths</h3> <ul> <li>Joe &#8211; Algorithms / Academic (<a href="https://projecteuler.net/archives">Project Euler Problems Archives</a>)</li> <li>Allen &#8211; Understanding and breaking down complex problems / Ability to learn how to solve the problems / Resourceful</li> <li>Michael &#8211; Attention to detail</li> </ul> <h4>Honorable Mentions?</h4> <ul> <li>UI Development</li> </ul> <p><em>&#8220;Successful software engineers are smart, but many have an insecurity that they aren&#8217;t smart enough.&#8221;</em> &#8211; John Washam</p> <h2>Resources We Like</h2> <ul> <li><em>The Imposter&#8217;s Handbook</em> (<a href="https://bigmachine.io/products/the-imposters-handbook">bigmachine.io</a>)</li> <li><em>How to pick up a new technology in minimal time</em> (<a href="https://dev.to/janux_de/how-to-pick-up-a-new-technology-in-minimal-time-2i4l">dev.to</a>)</li> <li><em>Dreyfus model of skill acquisition</em> (<a href="https://en.wikipedia.org/wiki/Dreyfus_model_of_skill_acquisition">Wikipedia</a>)</li> <li><em>Overview of learning styles</em> (<a href="https://www.learning-styles-online.com/overview/">https://www.learning-styles-online.com/overview/</a>)</li> <li><em>The Technical Interview Cheat Sheet</em> (<a href="https://gist.github.com/TSiege/cbb0507082bb18ff7e4b">GitHub</a>)</li> <li>How to be a Programmer resources: <ul> <li><em>How to be a Programmer: Community Version</em> (<a href="https://github.com/braydie/HowToBeAProgrammer">GitHub</a>)</li> <li><em>How to be a Programmer: Personal and Team Skills</em> (<a href="https://www.codingblocks.net/episode38">Episode 38</a>)</li> <li><em>How to be an Intermediate Programmer</em> (<a href="https://www.codingblocks.net/episode39">Episode 39</a>)</li> <li><em>How to be an Advanced Programmer</em> (<a href="https://www.codingblocks.net/episode40">Episode 40</a>)</li> </ul> </li> <li>Common gaps among programmers is a common question: <ul> <li><em>What Knowledge Gaps Do Self-Taught Programmers Generally Have?</em> (<a href="https://ask.slashdot.org/story/10/02/19/147251/what-knowledge-gaps-do-self-taught-programmers-generally-have">Slashdot</a>)</li> <li><em>What specifically is the knowledge gap between a strong self taught programmer and a software engineering grad?</em> (<a href="https://www.quora.com/What-specifically-is-the-knowledge-gap-between-a-strong-self-taught-programmer-and-a-software-engineering-grad">Quora</a>)</li> <li><em>What are some common &#8220;knowledge gaps&#8221; among self-taught programmers?</em> (<a href="https://www.reddit.com/r/learnprogramming/comments/ya0j5/what_are_some_common_knowledge_gaps_among/">Reddit</a>)</li> </ul> </li> <li>How to get hired by Google: <ul> <li><em>Why I studied full-time for 8 months for a Google interview</em> (<a href="https://medium.freecodecamp.org/why-i-studied-full-time-for-8-months-for-a-google-interview-cc662ce9bb13">freeCodeCamp</a>)</li> <li>John Washam&#8217;s amazing <em>Coding Interview University</em> resource (<a href="https://github.com/jwasham/coding-interview-university">GitHub</a>) <ul> <li><em>Computer Science Flash Cards</em> (<a href="https://github.com/jwasham/computer-science-flash-cards">GitHub</a>)</li> </ul> </li> <li><em>How we hire</em> (<a href="https://careers.google.com/how-we-hire/">Google Careers</a>)</li> <li><em>Grow Your Technical Skills with Google</em> (<a href="https://techdevguide.withgoogle.com/">Google Tech Dev Guide</a>)</li> </ul> </li> </ul> <h2>Tip of the Week</h2> <ul> <li><a href="https://podtail.com/en/podcast/app-dev-diary/">App Dev Diary</a> &#8211; Listen to devs discuss their journey building a guitar practice app!</li> <li><a href="https://marketplace.visualstudio.com/items?itemName=ms.feed#overview">Package Management</a> in Visual Studio Team Services</li> <li>Microsoft has been sneaking in T-SQL enhancements like CREATE OR ALTER and DROP TABLE IF EXISTS <ul> <li><a href="https://docs.microsoft.com/en-us/sql/database-engine/whats-new-in-sql-server-2016?view=sql-server-2017#transact-sql-enhancements">https://docs.microsoft.com/en-us/sql/database-engine/whats-new-in-sql-server-2016?view=sql-server-2017#transact-sql-enhancements</a></li> <li><a href="https://blogs.msdn.microsoft.com/sqlserverstorageengine/2015/11/03/drop-if-exists-new-thing-in-sql-server-2016/">https://blogs.msdn.microsoft.com/sqlserverstorageengine/2015/11/03/drop-if-exists-new-thing-in-sql-server-2016/</a></li> </ul> </li> </ul>
]]>
      </content:encoded>
      <enclosure url="http://media.blubrry.com/codingblocks/www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/codingblocks/coding-blocks-episode-82.mp3" length="53107456" type="audio/mpeg" />
      <itunes:subtitle>
        Inspired by Rob Conery's The Imposter's Handbook, we take an introspective look at ourselves to find two weaknesses and one strength while Allen shows off his vocal prowess in song, Joe needs a list, and Michael is a dash.
      </itunes:subtitle>
      <itunes:summary>
        Inspired by Rob Conery's The Imposter's Handbook, we take an introspective look at ourselves to find two weaknesses and one strength while Allen shows off his vocal prowess in song, Joe needs a list, and Michael is a dash.
      </itunes:summary>
      <itunes:author>
        Allen Underwood, Michael Outlaw, Joe Zack : Software Developers
      </itunes:author>
      <itunes:image href="https://www.codingblocks.net/wp-content/uploads/powerpress/codingblocks-itunes.jpg" />
      <itunes:explicit>clean</itunes:explicit>
      <itunes:duration>1:50:19</itunes:duration>
    </item>
    <item>
      <title>81. Understanding Complexity Theory</title>
      <link>
        https://www.codingblocks.net/podcast/understanding-complexity-theory/
      </link>
      <pubDate>Mon, 14 May 2018 02:14:30 +0000</pubDate>
      <guid isPermaLink="false">https://www.codingblocks.net/?p=3888</guid>
      <comments>
        https://www.codingblocks.net/podcast/understanding-complexity-theory/#comments
      </comments>
      <wfw:commentRss>
        https://www.codingblocks.net/podcast/understanding-complexity-theory/feed/
      </wfw:commentRss>
      <slash:comments>16</slash:comments>
      <category>
        <![CDATA[ Podcasts ]]>
      </category>
      <category>
        <![CDATA[ complexity ]]>
      </category>
      <category>
        <![CDATA[ complexity theory ]]>
      </category>
      <category>
        <![CDATA[ Rob Conery ]]>
      </category>
      <category>
        <![CDATA[ The Imposter's Handbook ]]>
      </category>
      <description>
        <img width="150" height="99" src="https://www.codingblocks.net/wp-content/uploads/2018/05/Episode081.jpg" class="webfeedsFeaturedVisual wp-post-image" alt="" style="display: block; margin-bottom: 5px; clear:both;max-width: 100%;" /><img width="150" height="99" src="https://www.codingblocks.net/wp-content/uploads/2018/05/Episode081.jpg" class="attachment-thumbnail size-thumbnail wp-post-image" alt="" style="float:left; margin:0 15px 15px 0;" />This episode we talk complexity theory while digging into Rob Conery's The Imposter's Handbook as Allen channels his inner Austin Powers, Michael finds linearly to complex to pronounce, and Joe ruins Batman for the rest of us.
      </description>
      <content:encoded>
        <![CDATA[
<img width="150" height="99" src="https://www.codingblocks.net/wp-content/uploads/2018/05/Episode081.jpg" class="webfeedsFeaturedVisual wp-post-image" alt="" style="display: block; margin-bottom: 5px; clear:both;max-width: 100%;" /><img width="150" height="99" src="https://www.codingblocks.net/wp-content/uploads/2018/05/Episode081.jpg" class="attachment-thumbnail size-thumbnail wp-post-image" alt="" style="float:left; margin:0 15px 15px 0;" /><p>This episode we talk complexity theory while digging into Rob Conery&#8217;s <em><a href="https://bigmachine.io/products/the-imposters-handbook/">The Imposter&#8217;s Handbook</a></em> as Allen channels his inner Austin Powers, Michael finds linearly too complex to pronounce, and Joe ruins Batman for the rest of us.</p> <p><span id="more-3888"></span></p> <h2>Sponsors</h2> <ul> <li><a href="/datadog">Datadog.com/codingblocks</a> &#8211; Sign up today for a free 14 day trial <strong><em>and</em></strong> get a free Datadog t-shirt after creating your first dashboard.</li> <li><a href="/stackoverflow">Stack Overflow for Teams</a> &#8211; Try it today with your first 14 days free.</li> </ul> <h2>Survey Says</h2> <p>During this episode we ask: How important is it that developers have an understanding of computer science-y topics?</p> <div class='bootstrap-yop'> <div class="basic-yop-poll-container" style="background-color:#333333;border:0px;border-style:solid;border-color:#ffffff;border-radius:3px;padding:0px;"data-id="58"data-temp="basic"data-skin="minimal"data-cscheme="black"data-cap="0"data-access="guest,wordpress"data-tid=""data-uid="48cb566c6db4cb710cc87cf9add1a4d4"data-resdet="percentages"data-show-results-to="guest,registered"data-show-results-moment="after-vote"data-show-results-only="false"data-show-results-as="bar"data-sort-results-by="as-defined"data-sort-results-rule="asc"data-gdpr="no"data-gdpr-sol="consent"><div class="basic-canvas"></div><div class="basic-inner"><div class="basic-message hide" style="background-color:#ffffff;border:0px;border-style:solid;border-color:#ffffff;border-radius:0px;padding:0px;color:#ff0000;font-size:small;""><p></p></div><div class="basic-overlay hide"><div class="basic-vote-options"><div class="basic-anonymous"><button type="button" class="btn btn-default"><i class="fa fa-user-secret" aria-hidden="true"></i>Anonymous Vote</button></div><div class="basic-wordpress"><button type="button" class="btn btn-default"><i class="fa fa-wordpress" aria-hidden="true"></i>Sign in with Wordpress</button></div></div><div class="basic-preloader hide"><div class="basic-windows8"><div class="basic-wBall basic-wBall_1"><div class="basic-wInnerBall"></div></div><div class="basic-wBall basic-Ball_2"><div class="basic-wInnerBall"></div></div><div class="basic-wBall basic-wBall_3"><div class="basic-wInnerBall"></div></div><div class="basic-wBall basic-wBall_4"><div class="basic-wInnerBall"></div></div><div class="basic-wBall basic-wBall_5"><div class="basic-wInnerBall"></div></div></div></div></div><form class="basic-form"><input type="hidden" name="_token" value="5c47eaccb5"><div class="basic-elements"><div class="basic-element basic-question" style="background-color:#f5f5f5;border:0px;border-style: solid;border-color:#ffffff;border-radius:3px;padding:10px;color:#000000;font-size:small;"data-id="58"data-uid="537daddac9ffa9f17ac3951b0e8d3470"data-type="question"data-question-type="text"data-min="1"data-max="3"data-display="vertical"data-colnum="2"><div class="basic-question-title">How important is it that developers have an understanding of computer science-y topics?</div><ul class="basic-answers"><li class="basic-answer" style="background-color:#f5f5f5;border:0px;border-style: solid;border-color:#ffffff;border-radius:0px;padding:0px;color:#000000;font-size:small;" data-id="891" data-type="text" data-vn="5" data-color="#fbd55e"><div class="basic-canvas"><span class="basic-howmuch"></span></div><div class="basic-inner"><label class="basic-label"><input type="radio" name="answer[58]" value="891"><span class="basic-answer-content"><span class="basic-text">Uh no.</span></span></label></div></li><li class="basic-answer" style="background-color:#f5f5f5;border:0px;border-style: solid;border-color:#ffffff;border-radius:0px;padding:0px;color:#000000;font-size:small;" data-id="892" data-type="text" data-vn="58" data-color="#fbd55e"><div class="basic-canvas"><span class="basic-howmuch"></span></div><div class="basic-inner"><label class="basic-label"><input type="radio" name="answer[58]" value="892"><span class="basic-answer-content"><span class="basic-text">Uh, yeah...I guess it&#039;s good.</span></span></label></div></li><li class="basic-answer" style="background-color:#f5f5f5;border:0px;border-style: solid;border-color:#ffffff;border-radius:0px;padding:0px;color:#000000;font-size:small;" data-id="893" data-type="text" data-vn="67" data-color="#fbd55e"><div class="basic-canvas"><span class="basic-howmuch"></span></div><div class="basic-inner"><label class="basic-label"><input type="radio" name="answer[58]" value="893"><span class="basic-answer-content"><span class="basic-text">It&#039;s not mission critical, but I prefer working with people who know their O from their Theta.</span></span></label></div></li><li class="basic-answer" style="background-color:#f5f5f5;border:0px;border-style: solid;border-color:#ffffff;border-radius:0px;padding:0px;color:#000000;font-size:small;" data-id="912" data-type="text" data-vn="3" data-color="#000000"><div class="basic-canvas"><span class="basic-howmuch"></span></div><div class="basic-inner"><label class="basic-label"><input type="radio" name="answer[58]" value="912"><span class="basic-answer-content"><span class="basic-text">* Super important, and I can prove it mathmatically...if you accept my base case!</span></span></label></div></li></ul></div></div><div class="basic-vote "><a href="#" class="button basic-vote-button" style="background:#ffffff;border:0px;border-style: solid;border-color:#000000;border-radius:3px;padding:0px;color:#333333;font-size:small;">vote</a></div></form></div></div> </div> <p>&nbsp;</p> <h2>News</h2> <ul> <li>Thank you to everyone that left us a review! <ul> <li>iTunes &#8211; N8__, 0321mike, the FQ, BearedWizzard, Traustitj</li> <li>Stitcher &#8211; CodingBerserker, The Other Other Michael, Gabe Hodges, stunnedbysoup, izzmunkee, YuvalRaz, sov9, Mohamed Omran</li> </ul> </li> <li>Joe and Allen made some companion videos to episode 80 <ul> <li>Develop ASP.NET Blazor Apps in a Docker Container &#8211; <a href="https://youtu.be/jGyFKH5y6LA">YouTube</a></li> <li>Docker via Visual Studio for Dot Net Core &#8211; <a href="https://youtu.be/rkFY_n-ReAM">YouTube</a></li> </ul> </li> </ul> <h2>Complexity Theory</h2> <ul> <li>Complexity theory, aka computational complexity theory, focuses on classifying problems by difficulty <ul> <li><a href="https://en.wikipedia.org/wiki/Computational_complexity_theory">https://en.wikipedia.org/wiki/Computational_complexity_theory</a></li> </ul> </li> </ul> <h3>There are multiple classifications:</h3> <h4>P &#8211; polynomial</h4> <ul> <li>In math, polynomials employ only addition, subtraction, multiplication, and/or non-negative integer exponents operations.</li> <li>These are simpler problems.</li> <li>Most of the problems we are asked solve are not in P.</li> <li>These scale linearly as the inputs scale.</li> </ul> <h4>NP &#8211; nondeterministic polynomial</h4> <ul> <li>Problems that are solvable in P time given a nondeterministic algorithm. &#8211; in the pub example, it was a &#8220;lucky guess&#8221; method.</li> <li>A problem is classified as in NP time if can be: <ul> <li>Solved in exponential time</li> <li>Verified in polynomial time</li> <li>And solvable in P time by nondeterministic methods</li> </ul> </li> <li>These are the types of problems we enjoy, be it at code we write for work or games we play with friends.</li> <li>These are the problems we deal with most on a daily basis. &#8211; also &#8220;enjoy&#8221; the most</li> </ul> <h4>NP-Complete</h4> <ul> <li>These are decision problems that are classifiable in both NP and NP-Hard.</li> <li>These problems are the hardest problems in NP.</li> </ul> <h4>NP-Hard</h4> <ul> <li>These can be reduced to other problems in NP, <strong>but</strong> not all NP-Hard problems are within NP.</li> <li>These problems are <em>&#8220;at least as hard as the hardest problems in NP&#8221;.</em></li> <li>These problems might not even be decidable.</li> </ul> <h4>Exp &#8211; exponentially complex, t=2^n</h4> <ul> <li>These are hard.</li> <li>These problems do not scale well as the inputs are increased. On a graph, 2^n is a hockey stick.</li> <li>These are the types of problems we&#8217;re <em>_asked_</em> to solve.</li> </ul> <h4> R</h4> <ul> <li>All problems that are solvable in finite time are said to be classified as in R. <ul> <li>P and Exp are solvable in finite time, therefore, they are also solvable in R.</li> </ul> </li> </ul> <p>And there are more classifications! But these are the ones we hear about most often.</p> <ul> <li>Complexity theorists have found ways to reduce problems from one to another</li> <li>There classifications help us to communicate how difficult something is. <ul> <li>This is part of <em>_our_</em> ubiquitous language.</li> </ul> </li> <li>One of the goals of turning a complex problem into a decision problem is the ability to verify the answer.</li> </ul> <p><em>_&#8221;&#8230;think about complexity in terms of time as you scale the inputs that go into the algorithm that you&#8217;re using to solve the problem.&#8221;_</em></p> <ul> <li>Problems like the Halting Problem are beyond R. <ul> <li>The Halting Problem in summary &#8211; Write a generalized problem that can determine if any other program will finish running or continue infinitely. <ul> <li><a href="https://en.wikipedia.org/wiki/Halting_problem">https://en.wikipedia.org/wiki/Halting_problem</a></li> </ul> </li> <li>The Halting Problem is considered undecidable.</li> </ul> </li> </ul> <p>&nbsp;</p> <h3><em>_&#8221;Will we ever have the ability to solve problems nondeterministically?&#8221;_</em></h3> <ul> <li>Not yet, but some think we eventually will be able to, be it an algorithm or chip <ul> <li>If so, then all NP problems get reduced to (or are solvable in) P time. Meaning NP=P.</li> <li>$1m if you can prove that P = NP (or vice verse) <ul> <li><a href="http://www.claymath.org/millennium-problems/p-vs-np-problem">http://www.claymath.org/millennium-problems/p-vs-np-problem</a></li> </ul> </li> </ul> </li> <li>But at the moment, NP!=P because we don&#8217;t have such an algorithm or chip</li> <li>Prolog has the ability to pick one of a number of methods with the same signature and try them in a &#8220;guess&#8221; approach, with the ability to back-track</li> </ul> <p>&nbsp;</p> <h3>Karp&#8217;s 21 NP-Complete problems</h3> <ul> <li><a href="https://en.wikipedia.org/wiki/Karp%27s_21_NP-complete_problems"> https://en.wikipedia.org/wiki/Karp%27s_21_NP-complete_problems</a></li> </ul> <h4>Knapsack</h4> <ul> <li>A combinatorial optimization problem</li> <li><em>_&#8221;Given a set of items, each with a weight and a value, determine the number of each item to include in a collection so that the total weight is less than or equal to a given limit and the total value is as large as possible.&#8221;_</em></li> <li>Sounds perfect for a gameshow. Or a robbery. Any heist movie. Games. Scheduling.</li> </ul> <h4>Clique</h4> <ul> <li>Deals with graphs and graph theory</li> <li><em>_&#8221;Consider a social network, where the graph&#8217;s vertices represent people, and the graph&#8217;s edges represent mutual acquaintance. Then a clique represents a subset of people who all know each other, and algorithms for finding cliques can be used to discover these groups of mutual friends.&#8221;_</em></li> <li>Think Facebook.</li> </ul> <h4>Bin Packing</h4> <ul> <li>A variation of Knapsack, a combinatorial optimization problem</li> <li><em>_&#8221;&#8230; objects of different volumes must be packed into a finite number of bins or containers each of volume V in a way that minimizes the number of bins used&#8221;_</em></li> <li>Think UPS, FedEx, Amazon, any shipping service, airlines</li> </ul> <h4>Traveling Salesman</h4> <ul> <li>A combinatorial optimization problem</li> <li><em>_&#8221;Given a list of cities and the distances between each pair of cities, what is the shortest possible route that visits each city exactly once and returns to the origin city?&#8221;_</em></li> <li>Think Google Maps. Or election campaign tours. Think concert tours.</li> </ul> <h4>Approximations can sometimes solve these problems in P time.</h4> <ul> <li>Consider a map routing problem: <ul> <li>First, head to the nearest city.</li> <li>From there, head to the next nearest city.</li> <li>This approach is called the &#8220;nearest neighbor&#8221;. <ul> <li>This is a &#8220;greedy algorithm&#8221;. Meaning, you do what suits your needs at the current position and value on the graph.</li> <li>Nearest neighbor is usually within 25% of the shortest path on average.</li> </ul> </li> </ul> </li> </ul> <h3>Summary</h3> <ul> <li>We can typically call simple, boring problems solvable in P time.</li> <li>More difficult/complex problems, like group decisions, are solvable in exponential time (Exp).</li> <li>Some problems are too complex to be determined in finite time, and are classified as undecidable. <ul> <li>Anything that can be solved, is solved in R.</li> <li>P and Exp are subsets of R.</li> </ul> </li> <li>Within NP, we have subclasses of problems: <ul> <li>P &#8211; decision problems that can be solved deterministically in polynomial time.</li> <li>NP &#8211; complex problems that can be solved in P time with nondeterministic methods. <ul> <li>These can be further broken down into: <ul> <li>NP-Complete &#8211; Decision problems we can easily/quickly verify.</li> <li>NP-Hard &#8211; Can be reduced to other problems in NP, <strong>but</strong> not all NP-Hard problems are within NP.</li> </ul> </li> </ul> </li> </ul> </li> <li>We&#8217;re often asked to solve NP-Complete and NP-Hard problems.</li> <li>Recognize them for what they are and approach them with care.</li> </ul> <h2>Resources We Like</h2> <ul> <li>The Imposter&#8217;s Handbook &#8211; <a href="https://bigmachine.io/products/the-imposters-handbook">https://bigmachine.io/products/the-imposters-handbook</a></li> <li>Big-O Cheat Sheet &#8211; <a href="http://bigocheatsheet.com/">http://bigocheatsheet.com/</a></li> <li>Boolean satisfiability problem (SAT) (<a href="https://en.wikipedia.org/wiki/Boolean_satisfiability_problem">Wikipedia</a>)</li> <li>Karp&#8217;s 21 NP-complete problems (<a href="https://en.wikipedia.org/wiki/Karp%27s_21_NP-complete_problems">Wikipedia</a>)</li> <li>Computational complexity theory (<a href="https://en.wikipedia.org/wiki/Computational_complexity_theory">Wikipedia</a>)</li> <li>P (complexity) (<a href="https://en.wikipedia.org/wiki/P_(complexity)">Wikipedia</a>)</li> <li>NP (complexity) (<a href="https://en.wikipedia.org/wiki/NP_(complexity)">Wikipedia</a>)</li> <li>NP-completeness (<a href="https://en.wikipedia.org/wiki/NP-completeness">Wikipedia</a>)</li> <li>NP-hardness (<a href="https://en.wikipedia.org/wiki/NP-hardness">Wikipedia</a>)</li> </ul> <h2>Tip of the Week</h2> <ul> <li>Temporal Tables in SQL Server 2016 &#8211; <a href="https://docs.microsoft.com/en-us/sql/relational-databases/tables/temporal-tables?view=sql-server-2017">docs.microsoft.com</a></li> <li>Hacker Daily &#8211; <a href="https://hackerdaily.co/">https://hackerdaily.co/</a></li> <li>Learn This One Weird Trick To Debug CSS &#8211; <a href="https://medium.freecodecamp.org/heres-my-favorite-weird-trick-to-debug-css-88529aa5a6a3">https://medium.freecodecamp.org</a></li> <li>Right click on your API call, and select <em>Replay XHR</em> in Chrome DevTools to recall that API. Makes testing server side changes super simple without needing to refresh your client.</li> <li>Machine Learning made for .NET &#8211; <a href="http://dot.net/ml">http://dot.net/ml</a> <ul> <li><a href="https://github.com/dotnet/machinelearning">https://github.com/dotnet/machinelearning</a></li> </ul> </li> </ul>
]]>
      </content:encoded>
      <enclosure url="http://media.blubrry.com/codingblocks/www.podtrac.com/pts/redirect.mp3/traffic.libsyn.com/codingblocks/coding-blocks-episode-81.mp3" length="53555584" type="audio/mpeg" />
      <itunes:subtitle>
        This episode we talk complexity theory while digging into Rob Conery's The Imposter's Handbook as Allen channels his inner Austin Powers, Michael finds linearly to complex to pronounce, and Joe ruins Batman for the rest of us.
      </itunes:subtitle>
      <itunes:summary>
        This episode we talk complexity theory while digging into Rob Conery's The Imposter's Handbook as Allen channels his inner Austin Powers, Michael finds linearly to complex to pronounce, and Joe ruins Batman for the rest of us.
      </itunes:summary>
      <itunes:author>
        Allen Underwood, Michael Outlaw, Joe Zack : Software Developers
      </itunes:author>
      <itunes:image href="https://www.codingblocks.net/wp-content/uploads/powerpress/codingblocks-itunes.jpg" />
      <itunes:explicit>clean</itunes:explicit>
      <itunes:duration>1:51:15</itunes:duration>
    </item>
  </channel>
</rss>